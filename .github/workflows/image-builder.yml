#==========================================================================
# Description: Build Armbian
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#==========================================================================

name: Kali ARM Builder

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      set_device:
        description: "Select Device."
        required: false
        default: "banana-pi"
        type: choice
        options:
 #         - all
          - banana-pi
          - banana-pro
          - beaglebone-black
          - chromebook-exynos
          - chromebook-nyan
          - chromebook-veyron
          - cubieboard2
          - cubietruck
          - cubox-i4pro
          - cubox
          - gateworks-newport
          - gateworks-ventana
          - imx-6ull-evk
          - mini-x
          - nanopc-t
          - nanopi-neo-plus2
          - odroid-c
          - odroid-u
          - odroid-xu3
          - pinebook-pro
          - pinebook
          - radxa-zero-emmc
          - radxa-zero-sdcard
          - raspberry-pi-64-bit
          - raspberry-pi-zero-2-w-pitail
          - raspberry-pi-zero-2-w
          - raspberry-pi-zero-w-p4wnp1-aloa
          - raspberry-pi-zero-w-pitail
          - raspberry-pi-zero-w
          - raspberry-pi
          - raspberry-pi1
          - riotboard
          - trimslice
          - usb-armory-mki
          - usb-armory-mkii
          - utilite-pro
      desktop:
        description: "Select Image Type."
        required: false
        default: "xfce"
        type: choice
        options:
 #         - all
          - xfce
          - gnome
          - kde
          - i3
          - lxde
          - mate
          - e17
          - minimal
          - slim
          - none
      extra_check:
        description: "Perform extra checks on the images build"
        required: false
        default: false
        type: boolean
      log_file:
        description: "Enable debug & log file"
        required: false
        default: false
        type: boolean
      builder_name:
        description: "Set Armbian builder signature."
        required: false
        default: "angel"
        type: choice
        options:
          - angel
          - yourname

env:
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
#      - name: Checkout
#        uses: actions/checkout@v3

#      - name: Initialization environment
#        id: init
#        env:
#          DEBIAN_FRONTEND: noninteractive
#        run: |
#          docker rmi `docker images -q`
#          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
#          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
#          sudo -E apt-get -y update
#          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
#          sudo -E apt-get -y install $(curl -fsSL https://is.gd/kaliarmtesting2)
#          sudo -E systemctl daemon-reload
#          #sudo -E apt-get -y full-upgrade
#          sudo -E apt-get -y autoremove --purge
#          sudo -E apt-get clean
#          sudo timedatectl set-timezone "${TZ}"
#          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Init
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -y update
          sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y install git curl wget
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          echo "status=success" >> ${GITHUB_OUTPUT}
          
      - name: Download source code
        id: sourcecode
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=main https://gitlab.com/kalilinux/build-scripts/kali-arm.git kali-arm
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Install dependencies
        id: depen
        if: ${{ steps.sourcecode.outputs.status }} == 'success' && !cancelled()
        run: |
          df -hT ${PWD}
          git clone -q --single-branch --depth=1 --branch=main https://gitlab.com/kalilinux/build-scripts/kali-arm.git kali-arm
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile Kali [ ${{ inputs.set_device }} ]
        id: compile
        if: ${{ steps.depen.outputs.status }} == 'success' && !cancelled()
        run: |
          # Compile method and parameter description: https://docs.armbian.com/Developer-Guide_Build-Options
        
          cd build/
              ./compile.sh RELEASE=${{ inputs.set_release }} BOARD=odroidn2 BRANCH=current BUILD_MINIMAL=no \
                  BUILD_ONLY=default HOST=armbian BUILD_DESKTOP=no EXPERT=yes KERNEL_CONFIGURE=no \
                  CLEAN_LEVEL="make,cache,alldebs,sources" COMPRESS_OUTPUTIMAGE="sha"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clean up server space
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd build/
            sudo rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
          cd output/images/
            img_name="$(ls *.img | head -n 1)"
            img_version="$(echo ${img_name} | grep -oE '[2-9][0-9]\.[0-9]{1,2}\.[0-9]{1,2}' | head -n 1)"
            img_kernel="$(echo ${img_name} | grep -oE '[5-9]\.[0-9]{1,2}\.[0-9]{1,3}' | head -n 1)"
            sudo mv -f ${img_name} Armbian_${img_version}-trunk_${img_kernel}.img
            sudo pigz -f *.img && sync
            sudo rm -rf $(ls . | grep -v ".img.gz" | xargs) 2>/dev/null
            df -hT ${PWD}
          echo "build_tag=Armbian_${{ inputs.set_release }}_${{ inputs.armbian_storage }}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload Armbian image to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.clean.outputs.build_tag }}
          artifacts: build/output/images/*.img.gz
          allowUpdates: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Rebuild Armbian
        uses: ophub/amlogic-s9xxx-armbian@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          build_target: armbian
          armbian_path: build/output/images/*.img.gz
          armbian_board: ${{ inputs.armbian_board }}
          armbian_kernel: ${{ inputs.armbian_kernel }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          armbian_fstype: ${{ inputs.armbian_fstype }}
          builder_name: ${{ inputs.builder_name }}
          gh_token: ${{ secrets.GH_TOKEN }}

      - name: Upload Rebuild image to Release
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.clean.outputs.build_tag }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### Armbian Image information
            - Default username: root
            - Default password: 1234
            - Install command: armbian-install
            - Update command: armbian-update
            ### Armbian Image Verification
            - sha256sum
